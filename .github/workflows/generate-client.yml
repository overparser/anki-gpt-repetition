name: Generate Python Client

on:
  push:
    branches:
      - main
    paths:
      - "user-service-api/**"
  workflow_dispatch:

jobs:
  generate-client:
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Проверяем изменения в user-service-api
      - name: Checkout main repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check changes in user-service-api
        run: |
          if [ "${{ github.event.before }}" = "0000000000000000000000000000000000000000" ]; then
            echo "First commit detected, treating as changed."
          else
            CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^user-service-api/' || echo '')
            if [ -z "$CHANGED" ]; then
              echo "No changes in user-service-api. Exiting."
              exit 0
            fi
          fi

      # Шаг 2: Настройка окружения и генерация кода (пример)
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Install openapi-generator-cli
        run: |
          curl -L https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/7.10.0/openapi-generator-cli-7.10.0.jar -o openapi-generator-cli.jar

      - name: Generate Python client code
        run: |
          java -jar openapi-generator-cli.jar generate \
            -i user-service-api/user-service.json \
            -g python-pydantic-v1 \
            -o generated_client \
            --library asyncio
          # Здесь сгенерированный код находится в директории generated_client

      # Шаг 3: Настройка Git локально (для фиктивного коммита, если нужно)
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Если нужно, вы можете попробовать перенести сгенерированный код в текущую директорию,
          # чтобы 'create-pull-request' увидел изменения. Однако, при указании repository:
          # экшен перезатирает рабочую директорию клонированием целевого репо.
          # В таком случае изменения должны быть сделаны непосредственно после клонирования целевого репо,
          # что невозможно, так как экшен делает всё в один шаг.

      # Шаг 4: Создание Pull Request в overparser/python-user-service-client
      # Внимание: 'create-pull-request' при указании repository: перезатрет workspace клонированием репозитория клиента
      # и попытается закоммитить изменения. Если вы хотите изменения в целевом репозитории,
      # их нужно каким-то образом подготовить заранее или рассмотреть альтернативный подход.
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.CODE_GENERATION_PAT }}
          repository: overparser/python-user-service-client
          branch: update-user-service-api
          base: main
          title: "Update Python client from user-service-api"
          body: "This PR updates the Python client based on the latest API specification."
          commit-message: "Update Python client from user-service-api"
          overwrite: false
